// Bi·∫øn to√†n c·ª•c
let display = document.getElementById('display');
let historyList = document.getElementById('historyList');
let currentInput = '';
let operator = '';
let previousInput = '';
let shouldResetDisplay = false;
let history = [];

/**
 * Th√™m gi√° tr·ªã v√†o m√†n h√¨nh hi·ªÉn th·ªã
 * @param {string} value - Gi√° tr·ªã c·∫ßn th√™m
 */
function appendToDisplay(value) {
    if (shouldResetDisplay) {
        display.value = '';
        shouldResetDisplay = false;
    }

    if (display.value === '0' && value !== '.') {
        display.value = value;
    } else {
        display.value += value;
    }
}

/**
 * X√≥a to√†n b·ªô m√†n h√¨nh v√† reset t·∫•t c·∫£ bi·∫øn
 */
function clearAll() {
    display.value = '0';
    currentInput = '';
    operator = '';
    previousInput = '';
    shouldResetDisplay = false;
}

/**
 * X√≥a k√Ω t·ª± cu·ªëi c√πng tr√™n m√†n h√¨nh
 */
function clearLast() {
    if (display.value.length > 1) {
        display.value = display.value.slice(0, -1);
    } else {
        display.value = '0';
    }
}

/**
 * T√≠nh to√°n k·∫øt qu·∫£ bi·ªÉu th·ª©c hi·ªán t·∫°i
 */
function calculate() {
    try {
        let expression = display.value;
        
        // Thay th·∫ø c√°c k√Ω hi·ªáu hi·ªÉn th·ªã b·∫±ng k√Ω hi·ªáu JavaScript
        expression = expression.replace(/√ó/g, '*').replace(/√∑/g, '/');
        
        // Ki·ªÉm tra bi·ªÉu th·ª©c h·ª£p l·ªá (ch·ªâ ch·ª©a s·ªë v√† to√°n t·ª≠ h·ª£p l·ªá)
        if (!/^[0-9+\-*/.() ]+$/.test(expression)) {
            throw new Error('Bi·ªÉu th·ª©c kh√¥ng h·ª£p l·ªá');
        }

        // T√≠nh to√°n k·∫øt qu·∫£
        let result = eval(expression);
        
        // Ki·ªÉm tra k·∫øt qu·∫£ h·ª£p l·ªá
        if (!isFinite(result)) {
            throw new Error('Kh√¥ng th·ªÉ chia cho 0');
        }

        // L√†m tr√≤n k·∫øt qu·∫£ n·∫øu l√† s·ªë th·∫≠p ph√¢n d√†i
        if (result % 1 !== 0) {
            result = parseFloat(result.toFixed(10));
        }

        // Th√™m v√†o l·ªãch s·ª≠
        addToHistory(display.value, result);

        // Hi·ªÉn th·ªã k·∫øt qu·∫£
        display.value = result.toString();
        shouldResetDisplay = true;

    } catch (error) {
        // Hi·ªÉn th·ªã l·ªói v√† t·ª± ƒë·ªông reset sau 1.5 gi√¢y
        display.value = 'L·ªói';
        setTimeout(() => {
            clearAll();
        }, 1500);
    }
}

/**
 * T√≠nh ph·∫ßn trƒÉm c·ªßa gi√° tr·ªã hi·ªán t·∫°i
 */
function calculatePercentage() {
    try {
        let value = parseFloat(display.value);
        if (isNaN(value)) {
            throw new Error('Gi√° tr·ªã kh√¥ng h·ª£p l·ªá');
        }
        
        let result = value / 100;
        addToHistory(display.value + '%', result);
        
        display.value = result.toString();
        shouldResetDisplay = true;
        
    } catch (error) {
        display.value = 'L·ªói';
        setTimeout(() => {
            clearAll();
        }, 1500);
    }
}

/**
 * Th√™m ph√©p t√≠nh v√†o l·ªãch s·ª≠
 * @param {string} expression - Bi·ªÉu th·ª©c ƒë√£ t√≠nh
 * @param {number} result - K·∫øt qu·∫£
 */
function addToHistory(expression, result) {
    let historyItem = {
        expression: expression,
        result: result,
        timestamp: new Date().toLocaleTimeString('vi-VN')
    };
    
    // Th√™m v√†o ƒë·∫ßu danh s√°ch l·ªãch s·ª≠
    history.unshift(historyItem);
    
    // Gi·ªõi h·∫°n l·ªãch s·ª≠ t·ªëi ƒëa 10 ph√©p t√≠nh
    if (history.length > 10) {
        history.pop();
    }
    
    // C·∫≠p nh·∫≠t hi·ªÉn th·ªã l·ªãch s·ª≠
    updateHistoryDisplay();
}

/**
 * C·∫≠p nh·∫≠t hi·ªÉn th·ªã danh s√°ch l·ªãch s·ª≠
 */
function updateHistoryDisplay() {
    historyList.innerHTML = '';
    
    history.forEach(item => {
        let historyDiv = document.createElement('div');
        historyDiv.className = 'history-item';
        historyDiv.innerHTML = `
            <div>${item.expression} = ${item.result}</div>
            <small style="opacity: 0.7; font-size: 12px;">${item.timestamp}</small>
        `;
        historyList.appendChild(historyDiv);
    });
}

/**
 * X·ª≠ l√Ω s·ª± ki·ªán b√†n ph√≠m
 * @param {KeyboardEvent} event - S·ª± ki·ªán b√†n ph√≠m
 */
function handleKeyboardInput(event) {
    const key = event.key;
    
    if (/[0-9]/.test(key)) {
        // S·ªë t·ª´ 0-9
        appendToDisplay(key);
    } else if (key === '.') {
        // D·∫•u th·∫≠p ph√¢n
        appendToDisplay('.');
    } else if (key === '+') {
        // Ph√©p c·ªông
        appendToDisplay('+');
    } else if (key === '-') {
        // Ph√©p tr·ª´
        appendToDisplay('-');
    } else if (key === '*') {
        // Ph√©p nh√¢n
        appendToDisplay('*');
    } else if (key === '/') {
        // Ph√©p chia - ngƒÉn kh√¥ng cho m·ªü menu t√¨m ki·∫øm c·ªßa tr√¨nh duy·ªát
        event.preventDefault();
        appendToDisplay('/');
    } else if (key === 'Enter' || key === '=') {
        // T√≠nh to√°n k·∫øt qu·∫£
        calculate();
    } else if (key === 'Escape' || key === 'c' || key === 'C') {
        // X√≥a to√†n b·ªô
        clearAll();
    } else if (key === 'Backspace') {
        // X√≥a k√Ω t·ª± cu·ªëi
        clearLast();
    } else if (key === '%') {
        // T√≠nh ph·∫ßn trƒÉm
        calculatePercentage();
    }
}

/**
 * Kh·ªüi t·∫°o ·ª©ng d·ª•ng
 */
function initializeCalculator() {
    // ƒê·∫£m b·∫£o DOM ƒë√£ load xong
    display = document.getElementById('display');
    historyList = document.getElementById('historyList');
    
    // Reset m√†n h√¨nh v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
    clearAll();
    
    // Th√™m event listener cho b√†n ph√≠m
    document.addEventListener('keydown', handleKeyboardInput);
    
    console.log('üßÆ M√°y t√≠nh ƒë√£ s·∫µn s√†ng!');
}

// Kh·ªüi t·∫°o khi DOM ƒë√£ load xong
document.addEventListener('DOMContentLoaded', initializeCalculator);